#!/usr/bin/php
<?php

/** Indicates that the program should quit, but allowing finally blocks to be run */
class LeQuit extends Exception { }

// Upgrade a project (the current directory) based on some template.

function currentCommitId($dir='.git', $branchName=null) {
	if( $branchName === null ) $branchName = currentBranchName($dir);
	$f = "{$dir}/refs/heads/{$branchName}";
	$c = file_get_contents($f);
	if( $c === false ) throw new Exception("Failed to read $f");
	return trim($c);
}
function currentBranchName($dir='.git') {
	$headFile = "$dir/HEAD";
	$headText = file_get_contents($headFile);
	if( $headText === false ) {
		throw new Exception("Couldn't determine current branch because couldn't read $headFile");
	}
	if( !preg_match( '#refs/heads/(.*)#', $headText, $bif ) ) {
		throw new Exception("Couldn't determine current branch");
	}
	return $bif[1];
}

function branchExists($branchName, $dir='.git') {
	return file_exists("$dir/refs/heads/$branchName");
}

function sys($cmd, $allowError=false) {
	if( is_array($cmd) ) {
		$cmd = implode(' ',array_map('escapeshellarg',$cmd));
	}
	fwrite(STDERR, "$ $cmd\n");
	system($cmd, $status);
	if( $status !== 0 and !$allowError ) {
		throw new Exception("Command exited with status $status: $cmd");
	}
	return $status === 0;
}


$templateProjectDir = null;
// If you change $projectDir, you'll need to adjust some of the git stuff,
// because it assumes we're in this directory already.
$projectDir = '.';

$rewriterDir = dirname(__DIR__);
for( $i=1; $i < count($argv); ++$i ) {
	if( $argv[$i] === '-t' ) {
		$templateProjectDir = $argv[++$i];
	} else {
		fwrite(STDERR, "Error: Unrecognized argument: ".$argv[$i]."\n");
		exit(1);
	}
}

if( $templateProjectDir === null ) {
	fwrite(STDERR, "Error: No template project directory (-t <dir>) specified.\n");
	exit(1);
}

$originalBranchName = currentBranchName();
$templateBranchName = 'rewritten-template-project';
$anyChanges = false;
$rewriteSuccess = false;
try {
	if( !branchExists($templateBranchName) ) {
		fwrite(STDERR, "$templateBranchName does not exist.  This is required for proper updating.\n");
		fwrite(STDERR, "You can create it from the 'Generate from template project' commit like so:\n");
		fwrite(STDERR, "$ git checkout <whatever that commit is> -b $templateBranchName\n");
		fwrite(STDERR, "Aborting.\n");
		throw new LeQuit();
		//sys("git checkout -b ".escapeshellarg($templateBranchName));
	} else {
		sys("git checkout ".escapeshellarg($templateBranchName));
	}
	
	$templateProjectGitDir = "{$templateProjectDir}/.git";
	$templateProjectBranch = currentBranchName($templateProjectGitDir);
	if( file_exists($templateProjectGitDir) ) {
		sys(array('git','fetch',$templateProjectGitDir));
		sys(array('git','merge','--no-commit','-s','ours',currentCommitId($templateProjectGitDir, $templateProjectBranch)));
	}
	
	sys("find . -mindepth 1 | grep -v '^\\./\\.git\\|^\\./\\.ppi-settings\\.json' | xargs rm -rf");
	sys(array($rewriterDir."/bin/rewrite-project", $templateProjectDir, $projectDir));
	sys("git add -A .");
	
	$gitStatus = `git status --porcelain`;
	$anyChanges = !empty($gitStatus);
	if( $anyChanges ) {
		sys("git commit -m 'Regenerate from template'");
	}
	$rewriteSuccess = true;
} catch( LeQuit $e ) {
	$rewriteSuccess = false;
} finally {
	if( !$rewriteSuccess ) sys("git reset --hard");
	sys("git checkout ".escapeshellarg($originalBranchName));
}

if( !$rewriteSuccess ) exit(1);

$merged = sys("git merge --no-commit ".escapeshellarg($templateBranchName), true);
if( !$merged ) {
	echo "Merge not successful, but everything else was.\n";
	echo "You may fix conflicts and complete the merge manually.\n";
} else {
	echo "Updated and merge completed (but not committed) automatically.\n";
	echo "Review the changes and complete the merge commit manually\n";
}
